############
Test script
###########

# make a directory for the scripts
mkdir ~/scripts

# create a script file and assign execute permissions to owner and group.  The $_ variable reuses the last parameter (the directory path /usr/local/bin/check_storage.sh in this case) and open vim
touch ~/scripts/hello.sh && chmod u+x,g+x $_ && vim $_

# in vim insert (press 'i') the shebang and comments/scripts
#!/bin/bash
#Report path variable
printf "\n\nHello $(echo $USER)\n\nYour path is...\n\n$(echo $PATH)\n\n"

#press :wq
# running hello.sh will fail until bash is configured to execute files from the new directory
# open the vi editor (or vim or whatever)
vi .bash_profile
# G then o to insert text at the end of the file
export PATH=$PATH:~/scripts
# esc then :wq

# reload the bash profile and its variables
source .bash_profile
hello.sh

######################
Automate df command
#####################
# set the vim editor to use line numbers:
echo ":set number" >> ~/.vimrc

# create script file and give users the necessary permissions to use it
touch ~/scripts/check_storage.sh && chmod u+x,g+x $_

# open the script in a text editor and press 'i' to insert the 'shebang' on line 1
vim ~/scripts/check_storage.sh
i
#!/bin/bash
# on line 2 insert the following comment
#Use df to report storage utilization
# press enter twice to skip to line 4, then type the following on lines 4 and 5.  This will echo the current date
echo "Volume storage check run on $(date)"
echo "-----------------"
# on lines 7 and 8 define the variable to use later as the name of the volume to check.  This will obviously change (see raid setup setup script for vg0-smb)
#Set path to share volume
vol=/dev/mapper/vg0-smb
# on line 9 enter the following.  
# $(...) is command substitution aka the output will be the result of the command
# the first subcommand uses df to get drive info.
# this is piped to the grep which searches results for anything matching the variable set above (in this case /dev/sda1 in the raid setup script).
# the awk command extracts the data to the fifth column of the results.  If you use df -h alone you can see all the details.  The 5th column is % of storage being used.
# the last cut command strips the percent sign (%) so that the script can perform arithmetic on it.
# the ultimate result is a single number that represents the percentage of storage being used by the /dev/vg0/smb-volume
pc=$(df -h | grep $vol | awk '{print $5}' | cut -d '%' -fl)

# on line 12 and 13 type the following
echo "$vol is $pc% full"
echo "Storage check complete"
# esc :wq to save and close

check_storage.sh

####################
Output to file instead of cli
####################
# insert command into line 3
exec >> ~/storage_report.txt
# changle last echo statement to the following (this will redirect echo to cli instead of txt file)
echo "Storage check reported to storage_report.txt" >&2
# verify with cat storage_report.txt

################
Use conditional statements
################
# Using nano or vim etc we edit the above script. We will output different messages baed on how full the storage devices is.
vim ~/scripts/check_storage.sh
# move to line 11 and press o to insert text onto line 12 and 13.  White space is for readability only
if [ $pc -h -ge 95 ] && [ $pc -le 100 ]; then
    echo "ALERT: $vol is $pc% full! Recommend immediate action!"
# add another condition onto line 14, 15, 16, 17 (moving the current text on line 14 down)
elif [ $pc -ge 50 ] && $pc -lt 95 ]; then
    echo "CAUTION: $vol is $pc% full! Consider freeing space or extending the volume"
elif [ $pc -lt 50 ]; then
    echo "$vol is $pc% full ... situation normal"
# on line 18, 19, 20 add the following
else
    echo "Encountered an error. Status code: $?" >&2
        exit $?
fi
# save and test
check_storage.sh && cat storage_report.txt

########
simulate storage becoming full bs= number of megabites of data, keep adding this command and check the output of the script.
########
dd if=/dev/zero of=/srv/smb2/collab/temp bs=245M count=2


###################
Looping through all storage devices
##################
# we will now progromatically test conditions for each device rather than hardcode device names into the script.
# open the script and ajust the vol variable so that it hold an array of device names.  Edit line 9
nano ~/scripts/check_storage.sh
vols=$(df -h | awk '{print $1}' | grep '/dev')
# press ESC and o to insert a new line to begin the loop
for vol in ${vols[*]}
# insert a new line for line 11 (above pc=)
do
# after line 23 (fi)
done
# indent everything between do and done for ease of viewing.
