# assuming we have sdb, sdc, sdd, sde 5GB extra disks.  
# we will partition disks 
# then create a logical raid, 
# then partion volumes in the array, 
# then create a 'physcial volume' made up of that array
# then create a LVM logical volume group for that physical volume, 
# then format with a file system and mount those logical volumes
# then configure smb protocol

# in terminal list the available blocks
lsblk

# Partition disks
####################
# its better to partition the block disks before creating the array and to partition them slightly smaller than max size to allow for differences between physical disks
su -
# launch partition utilitiy
gdisk /dev/sdb
# delete and partition
o
y
# create new partition
n
# take defaults and then write changes
w
# disk will now be patitioned as sdb1 continue with all the other block devices and create partitions

# Create array
##########################
# create RAID 5 array the letters in brackets are the block devices and the number after the bracket is the partiion number (1-128 whatever was chosen for each partition)
mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/sd[bcd]1

# confirm array and verfiy, if it shows as degraded wait until rebuild finishes and try again.
mdadm --detail /dev/md0

# create volumes (LVM = logical volume manager)
###############
# define /dev/md0 as a physical volume available to LVM
pvcreate /dev/md0
pvdisplay

# create a volume group /dev/md0 for the new volume  This is a 1:1 of physical volume to volume group, but you can have multiple PV to this volume group
vgcreate  vg0 /dev/md0
vgdisplay

# create two logical volumes in the volume group (/dev/vg0/smb and /dev/vg0/nfs)
lvcreate --name smb --size 1GB vg0
lvcreate --name nfs --size 1GB vg0
lvdisplay


# format and mount to make them available as storage resources to the local server and over the network.
###################
# format the smb LV with xfs
mkfs.xfs /dev/vg0/smb

# to mount temporarily
/dev/vg0/smb /srv/smb2/

# to create a mount point at boot in the /srv/smb2 directory
# first backup the 'original' configuration
cp /etc/fstab /etc/fstab.org
# create a directory to mount the file system
mkdir -p /srv/smb2

# use a function to return the volume's unique block ID and add it with the other parameters required for a valid fstab entry
# 0 parameter disables dump, while 2 sets the file system to be checked at startup (only root system should have this value set to 1)
echo "UUID=$(blkid /dev/vg0/smb -o value -s UUID) /srv/smb2 xfs defaults 0 2" >> /etc/fstab

# check updated fstab
cat /etc/fstab

# run the following to reload missing entries from fstab and verify the volume is mounted
mount -av
mount | grep vg0

# to make the volume available as a file share first bacup and then edit the .config
# backup
cp /etc/samba/smb.conf /etc/samba/smb.conf.org2
# open file editor of choice
vim /etc/samba/smb.conf
# after the [public] block insert the following code.  This will allow security permissions to be set from the Windows machine
[collab]
  path = /srv/smb2/public
  comment = Samba %v shared reasons
  browsability = Yes
  read only = No
  acl_xattr:ignore system acl = Yes
:wq

# define the folder owner in Windows
# Run the following commands:
mkdir -p /srv/smb2/collab
chown -R root: "ip address of windows server\localadmin" /srv/smb2/collab/
chmod -R 0770 /srv/smb2/collab

# apply (mandatory access control) MAC module called SELinux (security enahnced linux) label to restrict the use of any given part of the file system
# label will be the Samba context
# create label
semanage fcontext -a -t samba_share_t "/srv/smb2(/.*)?"
# apply
restorecon -Rv /srv/smb2
# update the Samba configuration
smbcontrol all-reload-config

######
# at this point if you logged onto a windows PC machine and UNC pathed into the server you would see the "collab" share, but the user would not have permission to use it
# on the windows server where this folder is mounted edit security permissions on the folder and add whatever security group or user you want to this share.
# on the linux server you can use the following command to view permissions
getfacl /srv/smb2/collab


#######################
EXTEND THE VOLUME
######################
# for example, while a robocopy is proceeding or just to quickly check capacity of the share type the following for the volume group:
df | grep vg0

# to extend the volume by 4GB:
lvextend -L4G /dev/vg0/smb

# configure the xfs file system to make use of the newly available space
xfs_growfs /dev/vg0/smb
df | grep vg0

################
Recover array from device failure
################

# simulate failure (as su) of sdc
./disk-disable.sh
# check array and note the uuid
mdadm --detil /dev/md0
# identify spare
lsblk
# then partition the spare, in this case it is sde.  Go through wizard
gdisk /dev/sde
# remove failed drive
mdadm --manage /dev/md0 --remove /dev/uuid (or partion name?)
# add newly partitioned spare
mdadm --manage /dev/md0 -a /dev/sde1
# check the array, run script to continue checking status
mdadm --detail /dev/md0
